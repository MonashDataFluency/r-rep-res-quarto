---
title: "Monash Data Fluency: Reproducible Research in R (with Quarto)"
theme: cerulean
---


<br>
<br>
<br>

## Workshop material

We will be working through this material on the Carpentries incubator site:

* [Workshop material](https://carpentries-incubator.github.io/reproducible-publications-quarto/index.html){target="_blank"}

We will use this example GitHub repository:

* <https://github.com/carpentries-incubator/quarto-project-example>{target="_blank"}

Some slides to put things in context:

* [Slides](slideshow.html){target="_blank"}

<br>
<br>
<br>

## Setup

You can use RStudio on your own laptop (preferred) or use [Posit Cloud](https://posit.cloud/). If using RStudio on your own laptop, follow the software installation instructions below. If using Posit Cloud, please still do steps 3 and 4 below.

If you have a Monash University supplied laptop, you may need to submit a service request to eSolutions to be allowed to install software. For now, use Posit Cloud.

**1. Install [R](https://cran.r-project.org/index.html)**

**2. Install [RStudio](https://posit.co/download/rstudio-desktop/)**

**3. In RStudio, run this R code to install some packages:**

```{r}
#| eval: false
install.packages(
    c("quarto","tidyverse","BayesFactor","patchwork","renv","usethis"))
```

**4. Create an account on [GitHub](https://github.com/)** if you don't already have one.

**5. Install git:**

**Windows** users should install Git for Windows (includes Git Credential Manager*).

**Mac** users should install Apple's Xcode command line tools, which includes git. This is also worthwhile because it will let you install R packages that need compilation. Open the Terminal app, type the command below, and press return:

```
xcode-select --install
```

(Mac users can also the binary installer here: ​​https://git-scm.com/download/mac. It is slightly out of date but should be fine. This method will be faster.)

Mac users should also install Git Credential Manager*: [download page](https://github.com/git-ecosystem/git-credential-manager/releases/), [installation instructions](https://github.com/GitCredentialManager/git-credential-manager/blob/release/docs/install.md). Download and open the appropriate ".pkg" file for your machine, gcm-osx-arm64-...pkg if you have an M1 or M2 mac, gcm-osx-x64-...pkg otherwise.

&nbsp;* Git Credential Manager should let us push (upload) changes to repositories on GitHub using the https method. Otherwise we would need to set up an ssh key to push changes, which is beyond the scope of this workshop.

If you run into problems installing any of these, you can use Posit Cloud for the workshop.


### Authentication without Git Credential Manager

There is an alternative method to push changes to GitHub using tokens.

This method will also work from Posit Cloud.

Log in to github.com
<br>→ Click the top right corner to open your account menu
<br>→ Settings
<br>→ Developer settings
<br>→ Personal access tokens
<br>→ Fine-grained personal access tokens (beta)
<br>→ Generate new token

Select:

* Repository access:
    * only select repositories → the repository we are working on
* Repository permissions:
    * commit statuses → access level: read & write
    * contents → access level: read & write

In the Terminal pane in RStudio you need to configure who you are for git with the following (filling in your details):

```
git config --global user.email "your.email@monash.edu"
git config --global user.name "your_github_username"
```

When pushing from RStudio, enter your GitHub username and then paste the token when prompted for a password.

### Optional further software

RStudio comes bundled with Quarto and LaTeX, but you can install them separately if you want to use them from the command line. LaTeX is used to create PDFs. We won't use this in the workshop.

* [Install Quarto](https://quarto.org/docs/get-started/)
* [Install the TinyTeX version of LaTeX using Quarto](https://quarto.org/docs/output-formats/pdf-engine.html)



<br>
<br>
<br>

## Bits and pieces

[Quarto reference](https://quarto.org/docs/reference/)

[Quarto markdown overview](https://quarto.org/docs/authoring/markdown-basics.html)

[Quarto user guides](https://quarto.org/docs/guide/) ← topics give a good idea of what is possible!

[Quarto cross-references](https://quarto.org/docs/authoring/cross-references.html) ← a useful but hard to discover feature

<br>

[More information on the BibTex format](https://www.bibtex.com/format/)

[More information about writing equations](https://en.wikibooks.org/wiki/LaTeX/Mathematics)

[An online equation editor](https://latexeditor.lagrida.com/)

<br>

[Monash themed Quarto templates by Rob Hyndman](https://robjhyndman.com/hyndsight/quarto_templates.html)


[Example of a peer-reviewed "knitted" publication](https://f1000research.com/articles/5-1408)

[Example of a GitHub repository associated with a publication](https://github.com/czbiohub/tabula-muris)

[Example of workshop material (in bookdown)](https://github.com/swbioinf/scRNAseqInR_Doco/)
<br>(Jointly developed by University of Queensland and Monash, check the [commit log](https://github.com/swbioinf/scRNAseqInR_Doco/commits/main)!)

<br>
<br>

### _quarto.yml file required for this workshop

```
project:
    execute-dir: "project"
```

<br>
<br>

### _quarto.yml suggested further settings

```
project:
    execute-dir: "project"     # Working directory always the same.
    output-dir: "output"       # HTML files go in this directory.
#    render:                    # Specify order of rendering.
#    - "report/preprocess.qmd"
#    - "report/my-report.qmd"

format:
    html:
        toc: true                # Table of contents.
        code-fold: true          # Initially hide code.
        fontsize: "10pt"         # Smaller font.
        embed-resources: true    # Ensure HTML files are fully self-contained.
```

After editing `_quarto.yml`, you may need to close and re-open your project in RStudio.

If you specify the order of rendering, the whole project can be run in the correct order in a single step. In RStudio this can be done in the "Build" pane with the "Render Project" button. On the command line it can be done with:

```
quarto render
```

<br>
<br>

### Nice looking tables

The default appearance of tables produced by code chunks is a bit plain. Try these instead, and look at their documentation for how to customize the output further.

```{r}
knitr::kable(mtcars)

DT::datatable(mtcars)
```
